generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // One for local dev, one for nodejs docker
}

datasource db {
  provider = "postgresql"
  url      = env("API_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email            String    @unique
  password         String
  confirmationCode String    @default(cuid())
  confirmedAt      DateTime?
  session          Session?

  userTraits   UserTraits @relation(fields: [userTraitsId], references: [id])
  userTraitsId String     @unique

  chromePod   ChromePod? @relation(fields: [chromePodId], references: [id])
  chromePodId String?    @unique
}

model Session {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionSecret Bytes

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model ChromePod {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chromePodId String @unique @default(cuid())
  hostname    String
  rdpUsername String
  rdpPassword String
  rdpPort     Int

  user User?
}

enum DataProvider {
  GOOGLE
  FACEBOOK
  OPENAI
}

// PERSONALITY MODELS --------------------------------------------

model UserTraits {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bigFive                  BigFive[]
  mbti                     Mbti[]
  sixteenPersonalityFactor SixteenPersonalityFactor[]
  politicalCompass         PoliticalCompass[]
  moralFoundations         MoralFoundations[]
  riasec                   Riasec[]

  userId String? @unique
  user   User?
}

model Riasec {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  realistic     Float
  investigative Float
  artistic      Float
  social        Float
  enterprising  Float
  conventional  Float
  summary       String?

  userTraits   UserTraits? @relation(fields: [userTraitsId], references: [id])
  userTraitsId String?
}

model MoralFoundations {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  careHarm            Float
  fairnessCheating    Float
  loyaltyBetrayal     Float
  authoritySubversion Float
  sanctityDegradation Float
  summary             String?

  goodCheck Float // more than 3 invalidates the test
  mathCheck Float // less than 3 invalidates the test

  userTraits   UserTraits? @relation(fields: [userTraitsId], references: [id])
  userTraitsId String?
}

model PoliticalCompass {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  economic Float
  social   Float
  summary  String?

  userTraits   UserTraits? @relation(fields: [userTraitsId], references: [id])
  userTraitsId String?
}

model BigFive {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  openness          Float
  conscientiousness Float
  extraversion      Float
  agreeableness     Float
  neuroticism       Float
  summary           String?

  userTraits   UserTraits? @relation(fields: [userTraitsId], references: [id])
  userTraitsId String?
}

model Mbti {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  extraversion Boolean
  sensing      Boolean
  thinking     Boolean
  judging      Boolean
  summary      String?

  userTraits   UserTraits? @relation(fields: [userTraitsId], references: [id])
  userTraitsId String?
}

model SixteenPersonalityFactor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  warmth             Float
  reasoning          Float
  emotionalStability Float
  dominance          Float
  liveliness         Float
  ruleConsciousness  Float
  socialBoldness     Float
  sensitivity        Float
  vigilance          Float
  abstractedness     Float
  privateness        Float
  apprehension       Float
  opennessToChange   Float
  selfReliance       Float
  perfectionism      Float
  tension            Float
  summary            String?

  userTraits   UserTraits? @relation(fields: [userTraitsId], references: [id])
  userTraitsId String?
}
