# Source: enclaveid/charts/guacamole/templates/deployment-guacamole.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enclaveid-guacamole-guacamole
  labels:
    app.kubernetes.io/name: guacamole
    helm.sh/chart: guacamole-1.4.1
    app.kubernetes.io/instance: enclaveid
    app.kubernetes.io/version: "1.5.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: guacamole-guacamole
      app.kubernetes.io/instance: enclaveid
  template:
    metadata:
      labels:
        app.kubernetes.io/name: guacamole-guacamole
        app.kubernetes.io/instance: enclaveid
    spec:
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      serviceAccountName: enclaveid-guacamole
      securityContext: {}
      initContainers:
        - name: wait-for-pg
          image: busybox
          command:
            - sh
            - -c
            - until nc -z enclaveid-postgresql.default.svc.cluster.local 5432; do echo waiting for postgresql; sleep 2; done;
        - name: create-init-db
          securityContext: {}
          image: "guacamole/guacamole:1.5.5"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: enclaveid-guacamole
          volumeMounts:
            - name: initdb
              mountPath: /data
          command: ["/bin/sh"]
          args:
            - -c
            - |
              /opt/guacamole/bin/initdb.sh --postgresql > /data/initdb.sql
          resources: {}
        - name: loaddb
          securityContext: {}
          image: "bitnami/postgresql:14.3.0-debian-10-r9"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: enclaveid-guacamole
          volumeMounts:
            - name: initdb
              mountPath: /data
          command: ["/bin/sh"]
          args:
            - -c
            - |
              export PGPASSWORD=$POSTGRES_PASSWORD
              # most likely already created, so don't fail, just log and move on
              psql -h $POSTGRES_HOSTNAME -d $POSTGRES_DATABASE -U $POSTGRES_USER -p $POSTGRES_PORT -a -w -f /data/initdb.sql || true
          resources: {}
      containers:
        - name: guacamole
          securityContext: {}
          image: "guacamole/guacamole:1.5.5"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: enclaveid-guacamole
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources: {}
      volumes:
        - name: initdb
          emptyDir: {}
---
# Source: enclaveid/charts/guacamole/templates/deployment-guacd.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enclaveid-guacamole-guacd
  labels:
    app.kubernetes.io/name: guacamole
    helm.sh/chart: guacamole-1.4.1
    app.kubernetes.io/instance: enclaveid
    app.kubernetes.io/version: "1.5.5"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: guacamole-guacd
      app.kubernetes.io/instance: enclaveid
  template:
    metadata:
      labels:
        app.kubernetes.io/name: guacamole-guacd
        app.kubernetes.io/instance: enclaveid
    spec:
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      serviceAccountName: enclaveid-guacamole
      securityContext: {}
      containers:
        - name: guacamole
          securityContext: {}
          image: "guacamole/guacd:1.5.5"
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: enclaveid-guacamole
          ports:
            - name: guacd
              containerPort: 4822
              protocol: TCP
          resources: {}
---
# Source: enclaveid/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enclaveid
  labels:
    helm.sh/chart: enclaveid-0.0.0
    app.kubernetes.io/name: enclaveid
    app.kubernetes.io/instance: enclaveid
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: enclaveid
      app.kubernetes.io/instance: enclaveid
  template:
    metadata:
      labels:
        app.kubernetes.io/name: enclaveid
        app.kubernetes.io/instance: enclaveid
    spec:
      volumes:
        - name: unencrypted-shared-storage
          persistentVolumeClaim:
            claimName: enclaveid-shared-pvc
        - name: api-tmpfs
          emptyDir:
            medium: Memory
      serviceAccountName: enclaveid
      securityContext: {}
      initContainers:
        - name: create-secrets
          image: "localhost:32000/create-secrets@sha256:cc49bf70e2b84eaf3ca04f9cd74ac5298ceba8999da1bbc5fdaf394beba139b4"
          imagePullPolicy: IfNotPresent
          args: ["microk8s", "master-secret", "enclaveid", "", "", ""]
          volumeMounts:
            - mountPath: /tmp
              name: api-tmpfs
            - mountPath: /mnt/unencrypted-shared-storage
              name: unencrypted-shared-storage
      containers:
        - name: enclaveid
          securityContext: {}
          image: "localhost:32000/api@sha256:6bdfe997ff30f48cb2d1705b26ed60860128fa61236aa81ebaf09cb6ce39a690"
          imagePullPolicy: IfNotPresent
          env:
            - name: DATABASE_URL
              value: postgresql://enclaveid:enclaveid@enclaveid-postgresql:5432/enclaveid_api
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
            - mountPath: /tmp
              name: api-tmpfs
            - mountPath: /mnt/unencrypted-shared-storage
              name: unencrypted-shared-storage
          resources: {}
---
# Source: enclaveid/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enclaveid-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/instance: enclaveid
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 16.2.0
    helm.sh/chart: postgresql-15.0.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: enclaveid-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: enclaveid
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: enclaveid-postgresql
      labels:
        app.kubernetes.io/instance: enclaveid
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 16.2.0
        helm.sh/chart: postgresql-15.0.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: enclaveid-postgresql
      automountServiceAccountToken: false
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: enclaveid
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:16.2.0-debian-12-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "enclaveid"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: enclaveid-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: enclaveid-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "enclaveid" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "enclaveid" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1024Mi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/logs
              subPath: app-logs-dir
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: custom-init-scripts
          configMap:
            name: enclaveid-postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: enclaveid/charts/guacamole/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "enclaveid-guacamole-test-connection"
  labels:
    app.kubernetes.io/name: guacamole
    helm.sh/chart: guacamole-1.4.1
    app.kubernetes.io/instance: enclaveid
    app.kubernetes.io/version: "1.5.5"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['enclaveid-guacamole:80']
  restartPolicy: Never
---
# Source: enclaveid/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "enclaveid-test-connection"
  labels:
    helm.sh/chart: enclaveid-0.0.0
    app.kubernetes.io/name: enclaveid
    app.kubernetes.io/instance: enclaveid
    app.kubernetes.io/version: "0.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['enclaveid:80']
  restartPolicy: Never
